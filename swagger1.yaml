openapi: 3.0.0
info:
  title: CASH CASTER
  description: ""
  version: 1.0.0
externalDocs:
  description: ""
  url: ""
servers:
  - url: "http://127.0.0.1:4000"
    description: Local Server

tags:
  - name: Auth
  - name: CashOffer
  - name: Category
  - name: Chat
  - name: PostToCashOffer
  - name: SubCategory
  - name: UploadFile

paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: "To register a new user"
      operationId: /api/auth/register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterRequest"
        "400":
          description: Password and confirm password must be same
          content: {}
        "409":
          description: User already exists with the email
          content: {}
        "401":
          description: Unauthorized
          content: {}

  /api/auth/login:
    post:
      tags:
        - Auth
      summary: "To login an existing user"
      operationId: /api/auth/login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginRequest"
        "400":
          description: Invalid login credentials
          content: {}
        "404":
          description: User not found with the email
          content: {}
        "401":
          description: Unauthorized
          content: {}

  /api/auth/logout:
    post:
      tags:
        - Auth
      summary: "To logout user from device"
      operationId: /api/auth/logout
      responses:
        "200":
          description: OK
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/category/create:
    post:
      tags:
        - Category
      summary: "Create category"
      operationId: /api/category/create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCategory"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record created successfully
        "400":
          description: Invalid Data
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/category/get-all:
    get:
      tags:
        - Category
      summary: Get all the categories
      operationId: /api/category/get-all
      parameters:
        - in: query
          name: paginate
          schema:
            type: boolean
          # value: false
        - in: query
          name: page
          schema:
            type: integer
          # value: 1
        - in: query
          name: perPage
          schema:
            type: integer
          # value: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllCategories"
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/category/view/{id}:
    get:
      tags:
        - Category
      summary: Get category by id
      operationId: /api/category/view
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          value: "66d314f0eb68144eae20f5a2"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCategoryById"
        "404":
          description: Record not found
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/category/update/{id}:
    put:
      tags:
        - Category
      summary: "Update category"
      operationId: /api/category/update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          value: "66d314f0eb68144eae20f5a2"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCategory"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record updated successfully
        "404":
          description: Record not found
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/category/delete/{id}:
    delete:
      tags:
        - Category
      summary: Delete category
      operationId: /api/category/delete
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          value: "e23456abcd45678123456781"
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record deleted successfully
        "404":
          description: Record not found
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/sub-category/create:
    post:
      tags:
        - SubCategory
      summary: "Create sub category"
      operationId: /api/sub-category/create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSubCategory"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record created successfully
        "400":
          description: Invalid Data
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/sub-category/get-all:
    get:
      tags:
        - SubCategory
      summary: Get all the sub categories
      operationId: /api/sub-category/get-all
      parameters:
        - in: query
          name: paginate
          schema:
            type: boolean
          # value: false
        - in: query
          name: page
          schema:
            type: integer
          # value: 1
        - in: query
          name: perPage
          schema:
            type: integer
          # value: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllSubCategories"
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/sub-category/view/{id}:
    get:
      tags:
        - SubCategory
      summary: Get sub category by id
      operationId: /api/sub-category/view
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          value: "66d314f0eb68144eae20f5a2"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSubCategoryById"
        "404":
          description: Record not found
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/sub-category/update/{id}:
    put:
      tags:
        - SubCategory
      summary: "Update sub category"
      operationId: /api/sub-category/update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          value: "66d314f0eb68144eae20f5a2"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSubCategory"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record updated successfully
        "404":
          description: Record not found
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/sub-category/delete/{id}:
    delete:
      tags:
        - SubCategory
      summary: Delete sub category
      operationId: /api/sub-category/delete
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          value: "e23456abcd45678123456781"
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record deleted successfully
        "404":
          description: Record not found
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/cash-offer/create:
    post:
      tags:
        - CashOffer
      summary: "Create cash offer"
      operationId: /api/cash-offer/create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCashOffer"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record created successfully
        "400":
          description: Invalid Data
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/cash-offer/get-all-cash-offers:
    get:
      tags:
        - CashOffer
      summary: Get all the cash offers
      operationId: /api/cash-offer/get-all-cash-offers
      parameters:
        - in: query
          name: paginate
          schema:
            type: boolean
          # value: false
        - in: query
          name: page
          schema:
            type: integer
          # value: 1
        - in: query
          name: perPage
          schema:
            type: integer
          # value: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllCashOffers"
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/cash-offer/view/{id}:
    get:
      tags:
        - CashOffer
      summary: Get cash offer by id
      operationId: /api/cash-offer/view
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          value: "66d314f0eb68144eae20f5a2"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCashOfferById"
        "404":
          description: Record not found
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/cash-offer/update/{id}:
    put:
      tags:
        - CashOffer
      summary: "Update cash offer"
      operationId: /api/cash-offer/update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          value: "66d314f0eb68144eae20f5a2"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCashOffer"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record updated successfully
        "404":
          description: Record not found
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/cash-offer/delete/{id}:
    delete:
      tags:
        - CashOffer
      summary: Delete cash offer
      operationId: /api/cash-offer/delete
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          value: "e23456abcd45678123456781"
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record deleted successfully
        "404":
          description: Record not found
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/cash-offer/cash-offer-clicked:
    post:
      tags:
        - CashOffer
      summary: "To update the view count of cash offer"
      operationId: /api/cash-offer/cash-offer-clicked
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CashOfferClicked"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Cash offer clicked
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/cash-offer/get-my-cash-offers:
    get:
      tags:
        - CashOffer
      summary: Get my cash offers
      operationId: /api/cash-offer/get-my-cash-offers
      parameters:
        - in: query
          name: paginate
          schema:
            type: boolean
          # value: false
        - in: query
          name: page
          schema:
            type: integer
          # value: 1
        - in: query
          name: perPage
          schema:
            type: integer
          # value: 10
        - in: query
          name: status
          schema:
            type: string
            enum:
              - pending
              - accepted
              - rejected
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMyCashOffers"
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/cash-offer/view-cash-offer/${id}:
    get:
      tags:
        - CashOffer
      summary: View cash offer
      operationId: /api/cash-offer/view-cash-offer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewCashOffer"
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/cash-offer/accept-reject-cash-offer:
    post:
      tags:
        - CashOffer
      summary: Accept or reject cash ofer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcceptRejectCashOffer"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Cash offer accepted or rejected
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/cash-offer/search:
    get:
      tags:
        - CashOffer
      summary: Search cash offers
      operationId: /api/cash-offer/search
      parameters:
        - in: query
          name: paginate
          schema:
            type: boolean
          # value: false
        - in: query
          name: page
          schema:
            type: integer
          # value: 1
        - in: query
          name: perPage
          schema:
            type: integer
          # value: 10
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - asc
              - desc
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              - createdAt
              - price
        - in: query
          name: keyword
          schema:
            type: string
            example: "cash offer"
        - in: query
          name: category
          schema:
            type: string
            example: "electronic"
        - in: query
          name: SubCategory
          schema:
            type: string
            example: "mobile"
        - in: query
          name: offerType
          schema:
            type: string
            enum:
              - service
              - product
        - in: query
          name: minPrice
          schema:
            type: integer
            example: 20
        - in: query
          name: maxPrice
          schema:
            type: integer
            example: 100
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchCashOffer"
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/cash-offer/statistics:
    get:
      tags:
        - CashOffer
      summary: Get cash offer statistics
      operationId: /api/cash-offer/statistics
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CashOfferStatistics"
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/post-to-cash-offer/create:
    post:
      tags:
        - PostToCashOffer
      summary: "Create post cash offer"
      operationId: /api/post-to-cash-offer/create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostToCashOffer"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record created successfully
        "400":
          description: Invalid Data
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/post-to-cash-offer/update/${id}:
    put:
      tags:
        - PostToCashOffer
      summary: "Update post to cash offer"
      operationId: /api/post-to-cash-offer/update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          value: "e23456abcd45678123456781"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePostToCashOffer"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record updated successfully
        "400":
          description: Invalid Data
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/post-to-cash-offer/delete/{id}:
    delete:
      tags:
        - PostToCashOffer
      summary: Delete post to cash offer
      operationId: api/post-to-cash-offer/delete
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          value: "e23456abcd45678123456781"
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record deleted successfully
        "404":
          description: Record not found
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/post-to-cash-offer/get-my-post-to-cash-offers:
    get:
      tags:
        - PostToCashOffer
      summary: Get my post to cash offers
      operationId: /api/post-to-cash-offer/get-my-post-to-cash-offers
      parameters:
        - in: query
          name: paginate
          schema:
            type: boolean
          # value: false
        - in: query
          name: page
          schema:
            type: integer
          # value: 1
        - in: query
          name: perPage
          schema:
            type: integer
          # value: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMyPostToCashOffer"
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/post-to-cash-offer/view-post-to-cash-offer:
    get:
      tags:
        - PostToCashOffer
      summary: Get all post to cash offers
      operationId: /api/post-to-cash-offer/view-post-to-cash-offer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllPostToCashOffer"
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/upload-file:
    post:
      tags:
        - UploadFile
      summary: Upload a file
      description: Upload a file to the server.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
        required: true
      responses:
        "200":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: "https://yourserver.com/uploads/filename.jpg"
        "400":
          description: File is required

  /api/chat/start-chat:
    post:
      tags:
        - Chat
      summary: "Start Chat"
      operationId: /api/chat/start-chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartChat"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: Record created successfully
        "400":
          description: Invalid Data
          content: {}
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

  /api/chat/get-messages:
    get:
      tags:
        - Chat
      summary: Get messages
      operationId: /api/chat/get-messages
      parameters:
        - in: query
          name: chatId
          schema:
            type: string
          exanple: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMessages"
        "401":
          description: Unauthorized
          content: {}
      security:
        - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      required:
        - email
        - password
        - deviceType
        - deviceToken
      type: object
      properties:
        email:
          type: string
          example: bilalkhan@yopmail.com
          format: email
        password:
          type: string
          example: Demo@123
          format: password
        deviceType:
          type: string
          example: web
        deviceToken:
          type: string
          example: asd123

    RegisterRequest:
      required:
        - firstname
        - lastname
        - email
        - phone
        - locationName
        - region
        - location
        - password
        - confirmPassword
      type: object
      properties:
        firstname:
          type: string
          example: bilal
        lastname:
          type: string
          example: khan
        email:
          type: string
          example: bilalkhan@yopmail.com
          format: email
        phone:
          type: string
          example: 123123123
        locationName:
          type: string
          example: California
        region:
          type: string
          example: California
        location:
          type: object
          properties:
            type:
              type: string
              enum:
                - Point
            coordinates:
              type: array
              items:
                type: number
              description: Coordinates in the format [longitude, latitude]
              example: [-122.4194, 37.7749]
        password:
          type: string
          example: Demo@123
          format: password
        confirmPassword:
          type: string
          example: Demo@123
          format: password

    CreateCategory:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: Electronic

    GetAllCategories:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: "e23456abcd45678123456781"
          name:
            type: object
            example: "Electronic"
          isDeleted:
            type: boolean
            example: false
          createdAt:
            type: date
            example: "2024-08-31T13:04:48.376Z"
          updatedAt:
            type: date
            example: "2024-08F-31T13:04:48.376Z"

    GetCategoryById:
      type: object
      items:
        type: object
        properties:
          _id:
            type: string
            example: "e23456abcd45678123456781"
          name:
            type: object
            example: "Electronic"
          isDeleted:
            type: boolean
            example: false
          createdAt:
            type: date
            example: "2024-08-31T13:04:48.376Z"
          updatedAt:
            type: date
            example: "2024-08F-31T13:04:48.376Z"

    UpdateCategory:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: Electronic

    CreateSubCategory:
      required:
        - name
        - parentCategoryId
      type: object
      properties:
        name:
          type: string
          example: Mobile
        parentCategoryId:
          type: string
          example: "669bb75b6b7aa78978e70f04"
    GetAllSubCategories:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: "e23456abcd45678123456781"
          parentCategoryId:
            type: string
            example: "e23456abcd45678123456781"
          name:
            type: object
            example: "Electronic"
          isDeleted:
            type: boolean
            example: false
          createdAt:
            type: date
            example: "2024-08-31T13:04:48.376Z"
          updatedAt:
            type: date
            example: "2024-08F-31T13:04:48.376Z"
    GetSubCategoryById:
      type: object
      items:
        type: object
        properties:
          _id:
            type: string
            example: "e23456abcd45678123456781"
          parentCategoryId:
            type: string
            example: "e23456abcd45678123456781"
          name:
            type: object
            example: "Electronic"
          isDeleted:
            type: boolean
            example: false
          createdAt:
            type: date
            example: "2024-08-31T13:04:48.376Z"
          updatedAt:
            type: date
            example: "2024-08F-31T13:04:48.376Z"
    UpdateSubCategory:
      required:
        - name
        - parentCategoryId
      type: object
      properties:
        name:
          type: string
          example: Mobile
        parentCategoryId:
          type: string
          example: "669bb75b6b7aa78978e70f04"

    CreateCashOffer:
      required:
        - userId
        - title
        - offerTypes
        - tags
        - price
        - parentCategoryId
        - subCategoryId
        - description
        - image
      type: object
      properties:
        userId:
          type: string
          example: "669cffa0478afc402c68a6c5"
        title:
          type: string
          example: "My cash offer 3"
        offerTypes:
          type: string
          example: "product"
          enum:
            - product
            - service
        tags:
          type: array
          example: ["phone", "television"]
        price:
          type: number
          example: 100
        parentCategoryId:
          type: string
          example: "669bb75b6b7aa78978e70f04"
        subCategoryId:
          type: string
          example: "669bb7756b7aa78978e70f07"
        description:
          type: string
          example: "lorem ipsum ....."
        image:
          type: string
          example: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRXJA32WU4rBpx7maglqeEtt3ot1tPIRWptxA&s"
    GetAllCashOffers:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: "e23456abcd45678123456781"
          userId:
            type: string
            example: "669cffa0478afc402c68a6c5"
          title:
            type: string
            example: "My cash offer 3"
          offerTypes:
            type: string
            example: "product"
            enum:
              - product
              - service
          tags:
            type: array
            example: ["phone", "television"]
          price:
            type: number
            example: 100
          parentCategoryId:
            type: string
            example: "669bb75b6b7aa78978e70f04"
          subCategoryId:
            type: string
            example: "669bb7756b7aa78978e70f07"
          description:
            type: string
            example: "lorem ipsum ....."
          image:
            type: string
            example: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRXJA32WU4rBpx7maglqeEtt3ot1tPIRWptxA&s"
          createdAt:
            type: date
            example: "2024-08-31T13:04:48.376Z"
          updatedAt:
            type: date
            example: "2024-08F-31T13:04:48.376Z"
    GetCashOfferById:
      type: object
      items:
        type: object
        properties:
          _id:
            type: string
            example: "e23456abcd45678123456781"
          userId:
            type: string
            example: "669cffa0478afc402c68a6c5"
          title:
            type: string
            example: "My cash offer 3"
          offerTypes:
            type: string
            example: "product"
          tags:
            type: array
            example: ["phone", "television"]
          price:
            type: number
            example: 100
          parentCategoryId:
            type: string
            example: "669bb75b6b7aa78978e70f04"
          subCategoryId:
            type: string
            example: "669bb7756b7aa78978e70f07"
          description:
            type: string
            example: "lorem ipsum ....."
          image:
            type: string
            example: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRXJA32WU4rBpx7maglqeEtt3ot1tPIRWptxA&s"
    UpdateCashOffer:
      required:
        - title
        - offerTypes
        - tags
        - price
        - parentCategoryId
        - subCategoryId
        - description
        - image
      type: object
      properties:
        title:
          type: string
          example: "My cash offer 3"
        offerTypes:
          type: string
          example: "product"
          enum:
            - product
            - service
        tags:
          type: array
          example: ["phone", "television"]
        price:
          type: number
          example: 100
        parentCategoryId:
          type: string
          example: "669bb75b6b7aa78978e70f04"
        subCategoryId:
          type: string
          example: "669bb7756b7aa78978e70f07"
        description:
          type: string
          example: "lorem ipsum ....."
        image:
          type: string
          example: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRXJA32WU4rBpx7maglqeEtt3ot1tPIRWptxA&s"

    CashOfferClicked:
      required:
        - userId
        - cashOfferId
      type: object
      properties:
        userId:
          type: string
          example: "669cffa0478afc402c68a6c5"
        cashOfferId:
          type: string
          example: "669cffa0478afc402c68a6c5"

    GetMyCashOffers:
      type: array
      items:
        type: object

    ViewCashOffer:
      type: object
      items:
        type: object

    AcceptRejectCashOffer:
      required:
        - cashOfferId
        - status
      type: object
      properties:
        cashOfferId:
          type: string
          example: "669cfff90167770081989e47"
        status:
          type: string
          example: "accepted"

    SearchCashOffer:
      type: array
      items:
        type: object

    CashOfferStatistics:
      type: object
      items:
        type: object

    CreatePostToCashOffer:
      required:
        - userId
        - cashOfferId
        - description
        - image
      type: object
      properties:
        userId:
          type: string
          example: "669bb75b6b7aa78978e70f04"
        cashOfferId:
          type: string
          example: "669bb75b6b7aa78978e70f04"
        description:
          type: string
          example: "abc"
        image:
          type: array
          example:
            [
              "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRXJA32WU4rBpx7maglqeEtt3ot1tPIRWptxA&s",
            ]

    UpdatePostToCashOffer:
      required:
        - description
        - image
      type: object
      properties:
        description:
          type: string
          example: "abc"
        image:
          type: array
          example:
            [
              "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRXJA32WU4rBpx7maglqeEtt3ot1tPIRWptxA&s",
            ]

    GetMyPostToCashOffer:
      type: array
      items:
        type: object

    GetAllPostToCashOffer:
      type: array
      items:
        type: object

    StartChat:
      required:
        - cashOfferId
        - participants
      type: object
      properties:
        cashOfferId:
          type: string
          example: "669cffa0478afc402c68a6c5"
        participants:
          type: array
          example: ["669cffa0478afc402c68a6c5", "669cffa0478afc402c68a6d5"]

    GetMessages:
      type: array
      items:
        type: object
